---
import Icon from "./Icon.astro";
interface Props {
  title: string;
}
const { title } = Astro.props;
---

<ul
  class="blog-menu menu bg-base-200 w-full p-0 fixed overflow-hidden bottom-0"
>
  <li class="text-accent-content hover:bg-base-100 bg-secondary">
    <button class="whitespace-nowrap focus:hover:text-base-content">
      <Icon icon="expand" />
      <span class="font-bold">{title}</span>
    </button>
  </li>
</ul>

<style>
  .blog-menu {
    transition: bottom 200ms;
  }
  :where(
      .menu
        li:not(.menu-title):not(.disabled)
        > :not(ul):not(details):not(.menu-title)
    ):not(summary):not(.active):focus {
    color: inherit;
  }
</style>

<script>
  import { useState, useStore } from "../scripts/state";

  const btn = document.querySelector(".blog-menu button")!;
  const menu = document.querySelector(".blog-menu")! as HTMLUListElement;
  const menuIcon = menu.querySelector("svg")!;
  const menuTitle = menu.querySelector("span")!;

  const trackedItems = [...document.querySelectorAll("h1, article > *")];
  const progress = document.querySelector("progress")!;
  const headers = [...document.querySelectorAll("article h2")];

  const menuState = useState({ open: true }, () => {
    menu.classList.toggle("bottom-0", !menuState.value.open);
    menu.style.bottom = menuState.value.open
      ? `0`
      : `-${headers.length * 2.25}rem`;
    if (menuIcon) {
      menuIcon.classList.toggle("rotate-180", menuState.value.open);
    }
  });

  const progressStore = useStore<
    { prev: Element; active: Element; activeSection: Element },
    | { type: "SET_PREV"; payload: Element }
    | { type: "SET_ACTIVE"; payload: Element }
    | { type: "SET_ACTIVE_SECTION"; payload: Element }
  >({
    initialState: {
      prev: trackedItems[0],
      active: trackedItems[0],
      activeSection: headers[0],
    },
    reducer: (state, action) => {
      switch (action.type) {
        case "SET_PREV":
          return { ...state, prev: action.payload };
        case "SET_ACTIVE":
          return { ...state, active: action.payload };
        case "SET_ACTIVE_SECTION":
          return { ...state, activeSection: action.payload };
        default:
          return state;
      }
    },
  });

  btn.addEventListener("click", () => {
    menuState.set({ open: !menuState.value.open });
  });

  document.addEventListener("scroll", () => {
    if (menuState.value.open) {
      requestIdleCallback(() => {
        menuState.set({ open: false });
      });
    }
  });

  for (const header of headers) {
    const anchor = document.createElement("a");
    anchor.href = `#${header.id}`;
    anchor.textContent = header.textContent;
    anchor.classList.add("link");
    anchor.addEventListener("click", (e) => {
      e.preventDefault();
      history.pushState(null, "", anchor.href);
      header.scrollIntoView({ behavior: "smooth" });
    });
    const li = document.createElement("li");
    li.appendChild(anchor);
    menu.appendChild(li);
  }

  const observer = new IntersectionObserver((entries) => {
    for (const entry of entries) {
      requestIdleCallback(() => {
        if (entry.isIntersecting) {
          progressStore.dispatch({
            type: "SET_PREV",
            payload: progressStore.getState().active,
          });
          progressStore.dispatch({
            type: "SET_ACTIVE",
            payload: entry.target,
          });
        }

        if (
          !entry.isIntersecting &&
          entry.target === progressStore.getState().active
        ) {
          progressStore.dispatch({
            type: "SET_ACTIVE",
            payload: progressStore.getState().prev,
          });
        }

        const i = trackedItems.indexOf(progressStore.getState().active);
        progress.value = ((i + 1) / trackedItems.length) * 100;

        if (headers.includes(progressStore.getState().active)) {
          progressStore.dispatch({
            type: "SET_ACTIVE_SECTION",
            payload: progressStore.getState().active,
          });
          menuTitle.textContent =
            progressStore.getState().activeSection.textContent;
        }
      });
    }
  });

  for (const item of trackedItems) {
    observer.observe(item);
  }
</script>
